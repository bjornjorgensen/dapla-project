@startuml

component "User Access" as user_access
component "Catalog" as catalog
component "Secret Service" as secret_service
component "Lineage" as lineage
component "Data Access" as data_access
database "Linked Data Store" as lds {
    database "Neo4j" as neo {
    }
    database "Solr" as solr {
    }
}
database "Google\nCloud Storage" as gcs {
}
cloud "dataproc" as pkg_haadop {
    [Yarn\nResource-\nManager] as yarn
    node "Master" as masternode {
        frame "Zeppelin\nSpark\nInterpreter" as interpreter {
            entity "Job" as job
        }
    }
    node "Worker" as worker {
        frame "Spark Executor" as executor {
            frame "Spark Task" as task {
                component [datasource] as datasource
                component [gcs connector] as gcs_connector_w
                gcs_connector_w ---> gcs
                gcs_connector_w ---> data_access
            }
        }
    }
}
component "Zeppelin" as zeppelin
catalog -> user_access
data_access --> catalog
data_access --> user_access

zeppelin -- interpreter

component "External\nDatasource" as source
component [Meta Governor] as governor
queue "Google\nPubSub" as pubsub {
}
queue "Saga Log" as sagalog {
}
cloud Collection {
    frame "Nginx\nSecure proxy" as sec_proxy {
        file "Client Certificate" as client_cert
    }
    component "Data Collector" as collector
    queue "Rawdata" as rawdata {
    }
    component "Converter" as converter
    collector -u-> sec_proxy
    collector ..> rawdata : publish with\npayload-\nencryption
    converter ..> rawdata : subscribe with\npayload-\ndecryption
    converter -> gcs : create-\nonly
    converter --> secret_service
}

governor --> gcs : read-\nonly
governor --> lineage
governor --> catalog
gcs .> pubsub : object-created\nevent
governor .> pubsub : subscribe
governor -> sagalog : append
governor ---> lds
sec_proxy -u-> source

@enduml