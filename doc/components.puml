@startuml

skinparam queue {
	backgroundColor<<events>> LightBlue
}

component "User Access" as user_access
component "Catalog" as catalog
component "Blueprint" as blueprint
component "Blueprint\nExecution" as blueprint_execution
component "Metadata\ningest" as metadata_ingest
component "Concept\ningest" as concept_ingest
component "Data Access" as data_access
database "Concept-LDS" as concept_lds {
}
database "Exploration-LDS" as exploration_lds {
}
database "Google\nCloud Storage" as gcs {
}
component "JupyterLab\n(personal)" as jupyter_lab {
    component "Spark/Python/R\n         Kernel" as kernel
}
catalog -> user_access
data_access --> catalog
data_access --> user_access

database "GitHub" as github

jupyter_lab --> github
blueprint --> github : read-only
blueprint_execution --> blueprint
kernel --> gcs : \n\nread/\nwrite
kernel --> data_access : get GCS\ntoken

component "External\nDatasource" as source
component "Metadata\nDistributor" as distributor
queue "DatasetMeta" as datasetmetaevents <<events>> {
}
queue "GCS" as gcsevents <<events>> {
}
queue "Metadata" as catalogQ {
}
queue "Metadata" as exploration_ldsQ {
}
component "Collector" as collector
queue "Rawdata" as rawdata {
}
component "Converter" as converter
collector -> rawdata : payload-\nencryption
rawdata <. converter
converter -u-> gcs

distributor --> gcs
distributor -> catalogQ
distributor --> exploration_ldsQ
gcs -> gcsevents
kernel --> datasetmetaevents : sign
distributor .> gcsevents
datasetmetaevents <.. distributor
exploration_ldsQ <. metadata_ingest
metadata_ingest --> exploration_lds : w
concept_ingest --> exploration_lds : w
concept_ingest --> concept_lds : r
catalogQ <. catalog
collector .u.> source

@enduml