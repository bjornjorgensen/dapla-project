@startuml

skinparam queue {
	backgroundColor<<events>> LightBlue
}
component "Zeppelin" as zeppelin
component "Zeppelin\nSpark\nInterpreter" as interpreter
component "User Access" as user_access
component "Catalog" as catalog
component "Lineage" as lineage
component "Data Access" as broker
database "Linked Data Store" as lds {
}
database "Google\nCloud Storage" as gcs {
}
component "Metadata\nDistributor" as distributor

queue "DatasetMeta" as datasetmetaevents <<events>> {
}
queue "GCS" as gcsevents <<events>> {
}
queue "Catalog\nMetadata" as catalogQ {
}
queue "LDS\nMetadata" as ldsQ {
}
queue "Lineage\nMetadata" as lineageQ {
}

frame "Executor" as worker {
  frame "Task" as task {
    [datasource] as datasource
    [gcs connector] as gcs_connector
  }
}

zeppelin -> interpreter : 1. submit job
interpreter --> worker : 2. distribute job
datasource --> broker : 3. write-location
broker --> user_access : 4. / 6. has-access?
gcs_connector --> broker : 5. get gcs\naccess-token
gcs_connector --> gcs : 6. write metadata\n8. write dataset\n9. write signature
datasource ...> datasetmetaevents : 7.b. metadata event (localstack)\n10.b. signature event (localstack)


distributor --> gcs : read metdata\nand signature
distributor ..> lineageQ : pub
distributor ..> catalogQ : pub
distributor ..> ldsQ : pub
gcs .> gcsevents : 7.a. metadata event\n10.a. signature event
distributor .> gcsevents : sub
distributor .u-> datasetmetaevents : sub
lds .u.> ldsQ : sub
catalog .u.> catalogQ : sub
lineage .u.> lineageQ : sub

@enduml